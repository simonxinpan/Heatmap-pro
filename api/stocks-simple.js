// ÁÆÄÂåñÁâàËÇ°Á•®Êï∞ÊçÆAPI - Áõ¥Êé•‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÊï∞ÊçÆÔºå‰∏ç‰ΩøÁî®Â§çÊùÇÁºìÂ≠òÈÄªËæë
import { Pool } from 'pg';

// Â∞ùËØïÂ§öÁßçÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
function getDatabaseUrl() {
    return process.env.NEON_DATABASE_URL || 
           process.env.DATABASE_URL || 
           process.env.POSTGRES_URL ||
           process.env.POSTGRES_PRISMA_URL;
}

export default async function handler(request, response) {
    try {
        const databaseUrl = getDatabaseUrl();
        
        if (!databaseUrl) {
            console.log('‚ùå Êú™ÊâæÂà∞Êï∞ÊçÆÂ∫ìËøûÊé•Â≠óÁ¨¶‰∏≤');
            return response.status(500).json({
                success: false,
                error: 'Êï∞ÊçÆÂ∫ìËøûÊé•Êú™ÈÖçÁΩÆ',
                message: 'ËØ∑Âú® Vercel ÁéØÂ¢ÉÂèòÈáè‰∏≠ÈÖçÁΩÆÊï∞ÊçÆÂ∫ìËøûÊé•Â≠óÁ¨¶‰∏≤'
            });
        }

        console.log('üîó Â∞ùËØïËøûÊé•Êï∞ÊçÆÂ∫ì...');
        
        const pool = new Pool({
            connectionString: databaseUrl,
            ssl: { rejectUnauthorized: false },
        });

        const client = await pool.connect();
        
        // È¶ñÂÖàÊ£ÄÊü•Ë°®ÊòØÂê¶Â≠òÂú®
        const tableCheck = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'stocks'
            );
        `);
        
        if (!tableCheck.rows[0].exists) {
            client.release();
            await pool.end();
            return response.status(500).json({
                success: false,
                error: 'stocks Ë°®‰∏çÂ≠òÂú®',
                message: 'ËØ∑ÂÖàËøêË°åÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñËÑöÊú¨'
            });
        }

        // Ëé∑ÂèñËÇ°Á•®Êï∞ÊçÆ - ‰ΩøÁî®ÁÆÄÂçïÊü•ËØ¢
        const result = await client.query(`
            SELECT 
                ticker,
                name_zh,
                market_cap,
                COALESCE(change_percent, 0) as change_percent,
                COALESCE(current_price, 100) as current_price
            FROM stocks 
            WHERE ticker IS NOT NULL 
            ORDER BY market_cap DESC NULLS LAST
            LIMIT 500
        `);
        
        client.release();
        await pool.end();
        
        console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${result.rows.length} Âè™ËÇ°Á•®Êï∞ÊçÆ`);
        
        // ËΩ¨Êç¢Êï∞ÊçÆÊ†ºÂºè
        const stocks = result.rows.map(row => ({
            symbol: row.ticker,
            name: row.name_zh || row.ticker,
            price: parseFloat(row.current_price) || 100,
            change: parseFloat(row.change_percent) || 0,
            marketCap: parseFloat(row.market_cap) || 1000000000
        }));
        
        response.status(200).json({
            success: true,
            data: stocks,
            meta: {
                total: stocks.length,
                source: 'database',
                timestamp: new Date().toISOString()
            }
        });
        
    } catch (error) {
        console.error('‚ùå APIÈîôËØØ:', error);
        response.status(500).json({
            success: false,
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
}